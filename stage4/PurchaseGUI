import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */


/**
 *
 * @author mayad
 */
public class PurchaseGUI extends javax.swing.JFrame {
       private  String itemName;
        private  String itemNumber;
        private float price;
        private  String itemQuantity;
        private HashMap<Integer,InventoryDB> items;
        private HashMap <Integer, Integer>cart;
        private float subtotal;
        Purchase purchase = new Purchase(items);
        private String dataName;


    /**
     * Creates new form PurchaseGUI
     * @param items
     */
    public PurchaseGUI(HashMap<Integer,InventoryDB> items) {
         this.items = items;
        purchase = new Purchase(items);
        dataName = "inventorydata.csv";
         initComponents();
 
    }
     public PurchaseGUI() {
        this.items = null;
        //items = purchase.getItems();
        dataName = "inventorydata.csv";
         initComponents();
 
    }
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        InventoryTable = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        subtotalTextField = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        QuantitySpinner = new javax.swing.JSpinner();
        CheckoutButton = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        TotalTextField = new javax.swing.JTextField();
        returnToMenuButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        jLabel1.setText("Purchase Menu");

        InventoryTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Name", "Price", "Quantity", "Aisle", "Item #", "Desc."
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        InventoryTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                InventoryTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(InventoryTable);

        jLabel2.setText("Subtotal $:");

        jLabel3.setText("Quantity: ");

        QuantitySpinner.setModel(new javax.swing.SpinnerNumberModel(0, 0, null, 1));

        CheckoutButton.setText("Checkout");
        CheckoutButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CheckoutButtonActionPerformed(evt);
            }
        });

        jButton1.setText("ComputeSubtotal");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel4.setText("Total: ");

        TotalTextField.setText("$0.00");
        TotalTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TotalTextFieldActionPerformed(evt);
            }
        });

        returnToMenuButton.setText("Return to Main Menu");
        returnToMenuButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                returnToMenuButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(36, 36, 36)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 651, Short.MAX_VALUE)
                .addGap(45, 45, 45))
            .addGroup(layout.createSequentialGroup()
                .addGap(317, 317, 317)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(QuantitySpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(347, 347, 347)
                                .addComponent(CheckoutButton))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(subtotalTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(231, 231, 231)
                                .addComponent(jLabel4)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(returnToMenuButton)
                                    .addComponent(TotalTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(38, 38, 38))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jButton1)
                        .addGap(536, 536, 536))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 215, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(30, 30, 30)
                        .addComponent(CheckoutButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(TotalTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4))
                        .addGap(18, 18, 18)
                        .addComponent(returnToMenuButton))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(27, 27, 27)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(QuantitySpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(subtotalTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButton1)))
                .addContainerGap(77, Short.MAX_VALUE))
        );

        setSize(new java.awt.Dimension(748, 464));
        setLocationRelativeTo(null);
    }// </editor-fold>                        

    private void formWindowOpened(java.awt.event.WindowEvent evt) {                                  
        // TODO add your handling code here:
      try {
    System.out.println("Reading data");
    
    
    File file = new File(dataName);
    if (!file.exists()) {
        System.out.println("File not found: " + dataName);
        return;  
    }
    
    BufferedReader reader = new BufferedReader(new FileReader(dataName));
    ArrayList<String> tableData = new ArrayList<>();
    String line;
    
    // Read all lines from the file
    while ((line = reader.readLine()) != null) {
        System.out.println("Line read: " + line);  
        tableData.add(line);
    }
    reader.close();
    
    
    System.out.println("Data in tableData: " + tableData);
    
   
    DefaultTableModel model = (DefaultTableModel) InventoryTable.getModel();
    
    // Loop through the rows and add them to the table
    for (String rowData : tableData) {
        String[] row = rowData.split(",");
        System.out.println("Row: " + Arrays.toString(row)); 
        
        model.addRow(row); 
    }
    
    JOptionPane.showMessageDialog(this, "Data loaded successfully");
}
catch (Exception e) {
    JOptionPane.showMessageDialog(this, "something went wrong"); 
}
                           
    }                                 

    private void InventoryTableMouseClicked(java.awt.event.MouseEvent evt) {                                            
       
    }                                           
    ArrayList<String> itemDataList = new ArrayList<>();
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {                                         
        // TODO add your handling code here:
         int selectedRow = InventoryTable.getSelectedRow();

    if (selectedRow != -1) {
        try {
           
            String priceString = InventoryTable.getValueAt(selectedRow, 1).toString();
            double price = Double.parseDouble(priceString); 
            
            
            int quantity = (int) QuantitySpinner.getValue();

            
            float subtotal = (float) (price * quantity);
            purchase.setSubtotal(subtotal);
            
            Integer itemNumber = Integer.valueOf(InventoryTable.getValueAt(selectedRow, 4).toString());
            int currentQuant =  Integer.valueOf(InventoryTable.getValueAt(selectedRow, 2).toString()); 
            int newQuantity = currentQuant - quantity;
            InventoryTable.setValueAt(newQuantity, selectedRow, 2);
            //purchase.updateItemQuantity(itemNumber, String.valueOf(newQuantity));
            //InventoryTable.setValueAt(String.format("%.2f", subtotal), selectedRow, 3); 
            
            String itemName = InventoryTable.getValueAt(selectedRow, 0).toString();
            String itemData = itemName + " | " + price + " | " + quantity + " | " + subtotal;
            itemDataList.add(itemData); // Save it to the list

            // Optionally update the subtotal text field
            subtotalTextField.setText(String.format("%.2f", subtotal));
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error updating subtotal: " + e.getMessage());
        }
    } else {
        JOptionPane.showMessageDialog(this, "Please select an item from the table first.");
    }
    }                                        

    private void CheckoutButtonActionPerformed(java.awt.event.ActionEvent evt) {                                               
        // TODO add your handling code here:
       //new CheckoutReportGUI().setVisible(true);    
       float subtotal = purchase.getSubtotal();
       float tax = purchase.computeTax(subtotal);
       TotalTextField.setText(String.format("%.2f", tax));
    }                                              

    private void TotalTextFieldActionPerformed(java.awt.event.ActionEvent evt) {                                               
        // TODO add your handling code here:
    }                                              

    private void formWindowClosed(java.awt.event.WindowEvent evt) {                                  
        // TODO add your handling code here:
        
    }                                 

    private void formWindowClosing(java.awt.event.WindowEvent evt) {                                   
        System.out.println("Window is closing");
ArrayList<String> data = new ArrayList<>();

for (int row = 0; row < InventoryTable.getRowCount(); row++) {
    String itemNumber = InventoryTable.getValueAt(row, 4).toString();  
    String itemName = InventoryTable.getValueAt(row, 0).toString();    
    String quantity = InventoryTable.getValueAt(row, 2).toString();    
    String price = InventoryTable.getValueAt(row, 1).toString();      
    String itemAisle = InventoryTable.getValueAt(row, 3).toString();  
    String itemDesc = InventoryTable.getValueAt(row, 5).toString();   

 
    System.out.println("Item Name: " + itemName);
    System.out.println("Price: " + price);
    System.out.println("Quantity: " + quantity);
    System.out.println("Aisle: " + itemAisle);
    System.out.println("Item Number: " + itemNumber);
    System.out.println("Description: " + itemDesc);

   
    String rowData = itemName + "," + price + "," + quantity + "," + itemAisle + "," + itemNumber + "," + itemDesc;
    data.add(rowData);
}

try (PrintWriter writer = new PrintWriter(new FileWriter(dataName))) {
    for (String rowData : data) {
        writer.println(rowData);
    }
    JOptionPane.showMessageDialog(null, "Data Saved");
} catch (Exception e) {
    JOptionPane.showMessageDialog(null, "Something Went wrong");
}
 
    }                                  

    private void returnToMenuButtonActionPerformed(java.awt.event.ActionEvent evt) {                                                   
        // TODO add your handling code here:
        dispose();
    }                                                  

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(PurchaseGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(PurchaseGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(PurchaseGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(PurchaseGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new PurchaseGUI().setVisible(true);
            }
        });
    }
    
    public ArrayList<String> getItemDataList() {
    return itemDataList; // Return the list of item data
}

    // Variables declaration - do not modify                     
    private javax.swing.JButton CheckoutButton;
    private javax.swing.JTable InventoryTable;
    private javax.swing.JSpinner QuantitySpinner;
    private javax.swing.JTextField TotalTextField;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton returnToMenuButton;
    private javax.swing.JTextField subtotalTextField;
    // End of variables declaration                   
}
